{
  "_comment_": "这是 Node.js 项目的清单文件 (manifest)。它定义了项目的基本信息、可执行脚本、依赖项等。对于 monorepo (单一代码库管理多个包) 来说，根目录的 package.json 通常定义了整个工作区的通用配置和脚本。",
  "name": "root",
  "_comment_name": "项目的名称。这里 'root' 表示这是 monorepo 的根项目，不是一个要发布的独立包。",
  "private": true,
  "_comment_private": "'private: true' 确保这个根项目本身不会被意外发布到 npm。",
  "repository": {
    "_comment_repository": "指定代码仓库的位置和类型，方便开发者查找源码和贡献。",
    "type": "git",
    "url": "https://github.com/TanStack/virtual.git"
  },
  "packageManager": "pnpm@10.8.1",
  "_comment_packageManager": "声明项目使用的包管理器及其版本。这里强制使用 pnpm 的 10.8.1 版本，确保所有开发者和 CI 环境使用相同的工具版本，避免因版本差异导致的问题。pnpm 以其高效的磁盘空间利用和快速的安装速度而闻名。",
  "type": "module",
  "_comment_type": "'type: \"module\"' 表明这个项目以及其下的包默认使用 ECMAScript (ES) 模块系统 (import/export 语法)，而不是传统的 CommonJS (require/module.exports)。这是现代 JavaScript 项目的趋势。",
  "scripts": {
    "_comment_scripts": "定义了一系列可以通过 'pnpm run <script_name>' 执行的脚本命令。这些脚本是项目开发、测试、构建等工作流程的入口。",
    "clean": "pnpm --filter \"./packages/**\" run clean",
    "_comment_clean": "清理命令。它使用 pnpm 的 '--filter' 参数，递归地执行所有位于 'packages/' 目录下的子包中的 'clean' 脚本。这通常用于删除构建产物或临时文件。",
    "preinstall": "node -e \"if(process.env.CI == 'true') {console.log('Skipping preinstall...'); process.exit(1)}\" || npx -y only-allow pnpm",
    "_comment_preinstall": "'preinstall' 是一个特殊的 npm/pnpm 脚本，在执行 'pnpm install' 之前自动运行。这里的逻辑是：如果在 CI (持续集成) 环境中 (通过检查环境变量 CI 是否为 'true')，则跳过后续检查；否则，使用 'npx only-allow pnpm' 命令强制开发者必须使用 pnpm 作为包管理器，如果尝试用 npm 或 yarn，会报错。这保证了项目依赖管理的一致性。",
    "test": "pnpm run test:ci",
    "_comment_test": "通用的测试命令，它实际调用了 'test:ci' 脚本。",
    "test:pr": "nx affected --targets=test:sherif,test:knip,test:eslint,test:lib,test:types,test:build,build",
    "_comment_test:pr": "用于 Pull Request (PR) 检查的测试命令。它使用 'nx affected' 来只测试那些受当前代码变更影响的项目。'--targets' 指定了要运行的一系列测试目标：代码风格检查 (sherif, eslint)、依赖检查 (knip)、库单元测试 (test:lib)、类型检查 (test:types)、构建测试 (test:build) 以及实际构建 (build)。这可以显著加快 PR 的检查速度。",
    "test:ci": "nx run-many --targets=test:sherif,test:knip,test:eslint,test:lib,test:types,test:build,build",
    "_comment_test:ci": "用于 CI 环境的测试命令。它使用 'nx run-many' 来在所有项目上运行指定的测试目标。这确保了所有包都被完整测试。",
    "test:eslint": "nx affected --target=test:eslint",
    "_comment_test:eslint": "运行 ESLint 代码风格检查，只检查受影响的项目。ESLint 用于发现代码中的潜在问题和风格不一致。",
    "test:format": "pnpm run prettier --check",
    "_comment_test:format": "检查代码格式是否符合 Prettier 的规范。'--check' 参数只检查不修改，如果格式不符会报错。Prettier 是一个自动代码格式化工具。",
    "test:sherif": "sherif",
    "_comment_test:sherif": "运行 sherif 工具。Sherif 可能是一个用于特定项目规范或依赖关系检查的工具。",
    "test:lib": "nx affected --target=test:lib --exclude=examples/**",
    "_comment_test:lib": "运行库（核心包和适配器包）的单元测试或集成测试，只检查受影响的库，并排除了 'examples/' 目录下的示例项目。",
    "test:lib:dev": "pnpm run test:lib && nx watch --all -- pnpm run test:lib",
    "_comment_test:lib:dev": "用于本地开发的库测试命令。它首先运行一次受影响的库测试，然后使用 'nx watch' 启动一个监视模式。当任何文件发生变化时，它会自动重新运行受影响的库测试，提高开发效率。",
    "test:build": "nx affected --target=test:build --exclude=examples/**",
    "_comment_test:build": "测试库的构建过程是否成功，只检查受影响的库，并排除了示例项目。",
    "test:types": "nx affected --target=test:types --exclude=examples/**",
    "_comment_test:types": "运行 TypeScript 类型检查，只检查受影响的库，并排除了示例项目。这有助于在编译前发现类型错误。",
    "test:knip": "knip",
    "_comment_test:knip": "运行 Knip 工具。Knip 用于检测项目中未使用的文件、依赖项和导出的类型/函数，帮助保持代码库的整洁。",
    "build": "nx affected --target=build --exclude=examples/**",
    "_comment_build": "构建命令，只构建受代码变更影响的库，并排除了示例项目。'--target=build' 指示 nx 运行每个受影响项目中定义的 'build' 脚本。",
    "build:all": "nx run-many --target=build --exclude=examples/**",
    "_comment_build:all": "强制构建所有库（非示例）项目，无论它们是否受到影响。",
    "watch": "pnpm run build:all && nx watch --all -- pnpm run build:all",
    "_comment_watch": "开发时的监视模式。它首先完整构建一次所有库，然后启动 'nx watch'。当任何文件变化时，它会自动重新构建所有库。这对于需要联动调试多个包的场景很有用。",
    "dev": "pnpm run watch",
    "_comment_dev": "启动开发环境的简写命令，它直接调用了 'watch' 脚本。",
    "prettier": "prettier --ignore-unknown '**/*'",
    "_comment_prettier": "运行 Prettier 代码格式化工具。'--ignore-unknown' 参数让 Prettier 跳过它不认识的文件类型。'**/*' 表示处理所有文件。",
    "prettier:write": "pnpm run prettier --write",
    "_comment_prettier:write": "使用 Prettier 自动格式化代码并直接修改文件。'--write' 参数是关键。",
    "changeset": "changeset",
    "_comment_changeset": "运行 Changesets 工具的命令行接口。Changesets 用于管理 monorepo 中的版本控制和发布流程。通常用 'pnpm changeset add' 来记录代码变更。",
    "changeset:version": "changeset version && pnpm install --no-frozen-lockfile && pnpm prettier:write",
    "_comment_changeset:version": "根据收集到的 'changeset' 文件，自动提升需要更新的包的版本号，并更新 'CHANGELOG.md' 文件。执行后，运行 'pnpm install' 更新 lock 文件，并运行 Prettier 格式化被修改的文件。",
    "changeset:publish": "changeset publish",
    "_comment_changeset:publish": "将那些在 'changeset version' 中版本号被提升的包发布到 npm。"
  },
  "nx": {
    "_comment_nx": "NX 是一个用于 Monorepo 的智能构建系统和开发工具。这个部分用来配置 NX 的行为。",
    "_comment_includedScripts": "告诉 NX哪些根目录的 scripts 也应该被视为 NX 的 '任务' (targets)，这样就可以使用 'nx run' 或 'nx affected' 来运行它们。",
    "includedScripts": [
      "test:knip",
      "test:sherif"
    ]
  },
  "devDependencies": {
    "_comment_devDependencies": "列出了项目开发过程中需要的依赖工具，这些依赖只在开发环境安装，不会被打包到最终发布的产品中。",
    "@changesets/cli": "^2.29.2",
    "_comment_changesets_cli": "Changesets 的命令行工具，用于版本管理和变更日志生成。",
    "@svitejs/changesets-changelog-github-compact": "^1.2.0",
    "_comment_changesets_changelog_github_compact": "一个 Changesets 的插件，用于生成更紧凑格式的、链接到 GitHub PR/Commit 的 Changelog。",
    "@tanstack/config": "^0.18.0",
    "_comment_tanstack_config": "可能是 TanStack (该项目的维护组织) 内部使用的配置或脚本包。",
    "@testing-library/jest-dom": "^6.6.3",
    "_comment_testing_library_jest_dom": "提供用于测试 DOM 的自定义 Jest 匹配器 (matchers)，例如检查元素属性、内容等。",
    "@types/node": "^22.13.6",
    "_comment_types_node": "Node.js 的 TypeScript 类型定义文件，让开发者可以在 TypeScript 代码中获得 Node.js API 的类型提示和检查。",
    "eslint": "^9.25.0",
    "_comment_eslint": "JavaScript 和 TypeScript 的代码检查工具 (linter)，用于发现代码错误、潜在问题和强制执行代码风格规范。",
    "jsdom": "^25.0.1",
    "_comment_jsdom": "一个纯 JavaScript 实现的 Web 标准库，特别是 WHATWG DOM 和 HTML 标准。它允许在 Node.js 环境中模拟浏览器环境，常用于单元测试。",
    "knip": "^5.50.5",
    "_comment_knip": "用于检测项目中未使用的文件、依赖和导出的工具。",
    "nx": "^20.8.0",
    "_comment_nx_dep": "NX monorepo 工具集的核心依赖。",
    "premove": "^4.0.0",
    "_comment_premove": "一个文件和目录移动工具，可能在构建或部署脚本中使用。",
    "prettier": "^3.5.3",
    "_comment_prettier_dep": "自动代码格式化工具。",
    "prettier-plugin-svelte": "^3.3.3",
    "_comment_prettier_plugin_svelte": "Prettier 的插件，使其能够格式化 Svelte 文件。",
    "publint": "^0.3.12",
    "_comment_publint": "一个用于检查 npm 包发布配置是否正确的工具，确保包能被正确地使用。",
    "sherif": "^1.5.0",
    "_comment_sherif_dep": "之前在 scripts 中看到的 sherif 工具的依赖。",
    "typescript": "5.2.2",
    "_comment_typescript": "TypeScript 语言的编译器和类型检查器。",
    "vite": "^5.4.18",
    "_comment_vite": "一个现代化的前端构建工具和开发服务器，以其极快的冷启动和热更新速度而闻名。在这里可能用于测试环境或示例项目。",
    "vitest": "^2.1.9",
    "_comment_vitest": "一个基于 Vite 的单元测试框架，同样以速度快著称。"
  }
}
